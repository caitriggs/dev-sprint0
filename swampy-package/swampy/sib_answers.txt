# Text answers from Week 0
# Name: Caitlin Riggs

-- Why would refactoring be useful?
To create more concise and readable source code. Refactoring is usually most helpful once code is written and the author decides there's a better way to structurally represent the code.

-- What would the code change be to make the house appear twice as high given the latest version of the refactor_example script?
If doubling the house's height in proportion to its width then you could change size from 10 to 20:
def draw_house(turtle, size=20)

Or, if doubling only the house's height then you could change the draw_house function to:
def draw_house(turtle, size=10):
  fdlt(turtle, 3*size)
  fdrt(turtle, 2*size)
  fdrt(turtle, 1*size)
  fdlt(turtle, 2*size)
  turtle.bk(1*size)
  fdlt(turtle, 4*size)
  fdlt(turtle, 8*size, 45)
  fdlt(turtle, 5*size)
  fdlt(turtle, 5*size, 45)
  fdlt(turtle, 8*size)
  turtle.lt()
  fdrt(turtle, 8*size)
  fdrt(turtle, 7*size)
  fdlt(turtle, 8*size)

-- What would the code change look like if we had never made a draw_house method that took size as a parameter (no need to actually write it, just explain what it would entail)?
def draw_house(turtle, size=10):
  fdlt(turtle, 3*size)
  fdrt(turtle, 2*size)
  fdrt(turtle, 1*size)
  fdlt(turtle, 2*size)
  turtle.bk(1*size)
  fdlt(turtle, 4*size)
  fdlt(turtle, 8*size, 45)
  fdlt(turtle, 5*size)
  fdlt(turtle, 5*size, 45)
  fdlt(turtle, 8*size)
  turtle.lt()
  fdrt(turtle, 8*size)
  fdrt(turtle, 7*size)
  fdlt(turtle, 8*size)

-- Note that to call fdlt() the way it is implemented, we need to write `fdlt(bob, 20)`, for example. What would the function look like if we wanted to also pass in a parameter for the angle?
def fdlt(t, length, angle)
fdlt(bob, 20, 45)
	
-- What would we have to do to be able to write `bob.fdlt(length, angle)`? (Hint: go back and take a look at how we define methods on the Turtle class in TurtleWorld.py)
Define a class, bob, and a function within the class, fdlt, containing the parameters length and angle
class bob:
    def fdlt(length, angle):


-- Why does theta need to be in units of degrees?
circle() takes a parameter, angle, in degrees, so arc(), because it's a portion of the circle, needs to be in the same units

-- What would you have to do in order to make arc(turtle=bob, r=10, theta=6.3) draw a complete circle (i.e. to make arc accept radians, instead of degrees)?
Convert the angle parameter of circle() into radians



Explain what each of the following lines does. Use the terminology you learned from the book (or Google)
	
	from TurtleWorld import * 
	world = TurtleWorld()
	bob = Turtle()
	wait_for_user()

Answer: (1) imports all functions from the module (a.k.a. library?), "TurtleWorld"
	(2) creates "world" variable and assigns the module's TurtleWorld() class
	(3) creates "bob" variable and assigns the module's Turtle() class
	(4) calls the module's "wait_for_user()" function


These questions pertain to the program you wrote in Week0.

-- What are the arguments of polygon()?  What type is each argument?
Answer: t, n, length
	turtle name, number of sides, and length of side
	string, integer, integer

-- What two turtle functions did you use to draw the sides of the polygon?
Answer: fd()
	lt()

-- What are the arguments for polyline?  What type is each argument?
Answer: t, n, length, angle
	turtle name, number of lines, length of line, and angle of line (in degrees)
	string, integer, integer, integer (or float if "step_angle" is used)




Suppose you wrote a function, center_circle(), that draws a circle of a given radius around the current location of the turtle and restores the turtle to its starting point.

-- What turtle functions would you use to move the turtle from the center to the edge of the circle and get ready to call the original circle() function?
Answer:

-- Suppose the interface of this function requires the turtle to end up in the same place it started, facing in the same direction it started.
Answer:

-- What is this type of requirement called?
Answer: